##############################
##     INSTRUCTION LIST     ##
##############################


1. What to do to call function?

>>> from queue import Queue
>>> import threading

>>> communication_queue = Queue()
>>> control_thread = threading.Thread(name='Control_Cycle', target=control_routine, args=(communication_queue,))
>>> control_thread.start

Communication_queue will be used to retrieve results and errors as such:

Send Value:
communication_queue.put(some_value)

Get Value:
result = communication_queue.get()

##############################


2. First Run:

In the first run the function will need the following reference values (taken from database) in this order:
(NAMES ARE JUST EXAMPLE, choose your own)

>>> DENSITY     REFERENCE ---> communication_queue.put(density_ref)
>>> COLOR       REFERENCE ---> communication_queue.put(color_ref)
>>> TEMPERATURE REFERENCE ---> communication_queue.put(temperature_ref)
>>> TIME        REFERENCE ---> communication_queue.put(tanins_ref)
>>> TANINS      REFERENCE ---> communication_queue.put(time_ref)

From now on the function will work in automatic mode.

##############################


3. Automatic mode... what does that mean?

The function will work by using one of the two cases:

CASE 1:  Send -1  ---> Send Sensor Input    ---> Maybe Get Errors ---> Get Control Answer
CASE 2:  Send -2  ---> Send Reference Value ---> Maybe Get Errors ---> Get Control Answer


###   CASE 1   ###

This will be the one executed every ten minutes. In this order send the following values:

>>> communication_queue.put(-1)
>>> communication_queue.put(density_sensor)
>>> communication_queue.put(color_sensor)
>>> communication_queue.put(temperature_sensor)
>>> communication_queue.put(tanins_sensor)

After this this control will calculate and send any errors that may come in the process.
The errors will come as negative msgs (-1 or -2 or -3...). At the end of this doc there is an error
list for the meaning of each possibility. Some may come in handy, who knows...

After this control will send a 1 saying it's ready to send result followed by the results.
Results can be a 0 or 1 saying if remontagem/chiller should be done(1) or not(0).

An example to handle this could be:

>>> communication_queue.put(-1)
>>> communication_queue.put(density_sensor)
>>> communication_queue.put(color_sensor)
>>> communication_queue.put(temperature_sensor)
>>> communication_queue.put(tanins_sensor)
>>>
>>> while True:
>>>
>>>     results = []
>>>     temp = communication_queue.get()
>>>
>>>     print("ERROR LIST")
>>>     if temp == 1:
>>>         print("\nEOF ERROR LIST")
>>>         temp = communication_queue.get()
>>>         results.append(temp)
>>>         print("REMONTAGEM WILL WORK = " + str(temp))
>>>         temp = communication_queue.get()
>>>         results.append(temp)
>>>         print("CHILLER    WILL WORK = " + str(temp))
>>>         break
>>>
>>>     else:
>>>         temp = communication_queue.get()
>>>         results.append(temp)
>>>         print(temp)

In this case the list results will contain errors followed by a 1 and the last two result values.


###   CASE 2   ###

This will be the one executed when there is a change in the reference. In this order send the following values:

>>> communication_queue.put(-2)
>>> communication_queue.put(density_ref)
>>> communication_queue.put(color_ref)
>>> communication_queue.put(temperature_ref)
>>> communication_queue.put(tanins_ref)
>>> communication_queue.put(time_ref)

However Most of the times not all references will change at same time.
To avoid sending all, if for example only temperature reference changes:

>>> communication_queue.put(-2)
>>> communication_queue.put(-1)
>>> communication_queue.put(-1)
>>> communication_queue.put(temperature_ref)
>>> communication_queue.put(-1)
>>> communication_queue.put(-1)

After this the behaviour will be exactly the same as CASE 1.

##############################

This is a list with all error possibilities.
IF ERRORS HAVE A YES IN "IF THIS HAPPENS NOTIFY DEV" Please, uh, notify the dev.

ERROR POSSIBILITIES:

||  ERROR CODE  ||  REASON                                          ||  WILL PROGRESS?                              || IF THIS HAPPENS NOTIFY DEV?
||              ||                                                  ||                                              ||
||      -1      ||  INITIAL INPUT is different than -1 or -2        ||  NO                                          || NOPE
||      -2      ||  Density values are outside boundaries           ||  YES ---> Density set to max/min limit       || YES
||      -3      ||  Density has gone below the reference value      ||  YES ---> Density Error in absolute value    || NOPE
||      -4      ||  Color values are outside boundaries             ||  YES ---> Color set to max/min limit         || YES
||      -5      ||  Color has gone above reference value            ||  YES ---> Color Error in absolute value      || NOPE
||      -6      ||  Temperature values are outside boundaries       ||  YES ---> Temperature set to max/min limit   || YES
||      -7      ||  Time has gone above imposed limit               ||  YES ---> Time set to max value              || NOPE
||      -8      ||  Tanins values are outside boundaries            ||  YES ---> Tanins set to max/min values       || YES
||      -9      ||  Tanins have gone above reference value          ||  YES ---> Tanins Error in absolute value     || NOPE
